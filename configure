#!/usr/bin/env bash

# Variables

DEBUG=0
SYSTEM=unix
HELP=0
CODECHECK=0
DEVELOP=0

# Default compiler settings
CXX=${CXX:-g++}
LINK=${LINK:-g++}
FLAGS=${FLAGS:--Wall -c}
DEBUGFLAGS=${DEBUGFLAGS:--g -DATOM_DEBUG}
UNIXGLAGS=${UNIXFLAGS:--DUNIX}
UNIXCORELIB=${UNIXCORELIB:--lSDL -lGL}
WINDOWSCORELIB=${WINDOWSCORELIB:--lSDLmain -lSDL -lopengl32}
FSMANFLAGS=${FSMANFLAGS:--D_FSMANAGER_}
UNIXCPPLINT=${UNIXCPPLINT:-python cpplint.py}
WINDOWSCPPLINT=${WINDOWSCPPLINT:-python.exe cpplint.py}
CPPLINTFLAGS=${CPPLINTFLAGS:---filter=-legal/copyright,-build/header_guard,-build/include,-runtime/int,-runtime/references,-whitespace/newline}
UNIXCOREPATH=core/
WINDOWSCOREPATH=core\\
UNIXCOREOBJPATH=${UNIXCOREPATH}obj/
WINDOWSCOREOBJPATH=${WINDOWSCOREPATH}obj\\
UNIXUTILSPATH=utils/
WINDOWSUTILSPATH=utils\\
UNIXUTILSOBJPATH=${UNIXUTILSPATH}obj/
WINDOWSUTILSOBJPATH=${WINDOWSUTILSPATH}obj\\
UNIXBINPATH=bin/
UNIXDEBUGBINPATH=atom-engine-test/
WINDOWSBINPATH=bin\\
WINDOWSDEBUGBINPATH=atom-engine-test\\
UNIXATOM=atom
WINDOWSATOM=atom.exe
UNIXFSMAN=fsman
WINDOWSFSMAN=fsman.exe
GCCOBJEXT=${GCCEXT:-.o}
WINOBJEXT=${WINEXT:-.obj}

# Parse command line arguments
for arg in $*; do
  case $arg in
    --enable-debug*)
      DEBUG=1
      ;;
    --system=*)
      SYSTEM=`echo "${arg}" | cut -d= -f2`
      ;;
    --develop*)
      DEVELOP=1
      CODECHECK=1
      DEBUG=1
      ;;
    --help)
      HELP=1
      ;;
    -h)
      HELP=1
      ;;
  esac
done

# Print Command Line Options
if [[ $HELP -eq 1 ]] ; then
  echo "Available options:"
  echo "   --enable-debug                  Compile with debug information"
  echo "   --system=<p>                    Target system (windows, unix)"
  echo "   --develop                       Enable develop build (with codecheck & debug)"
  echo "   -h,--help                       Show this Help"
  exit 0
fi

# Begin processing...

if [[ $DEVELOP -eq 1 ]] ; then
  echo "Build develop version"
fi

# Debug/Release mode
if [[ $DEBUG -eq 1 ]] ; then
  echo "Debug information will be available"
  FLAGS+=" "
  FLAGS+=$DEBUGFLAGS
else
  echo "Build release version"
fi

# Target system
if [ $SYSTEM = "unix" ] ; then
  echo "Target system is unix"
  FLAGS+=" "
  FLAGS+=$UNIXFLAGS
  CORELIB=${CORELIB:-$UNIXCORELIB}
  COREPATH=${COREPATH:-$UNIXCOREPATH}
  COREOBJPATH=${COREOBJPATH:-$UNIXCOREOBJPATH}
  UTILSPATH=${UTILSPATH:-$UNIXUTILSPATH}
  UTILSOBJPATH=${UTILSOBJPATH:-$UNIXUTILSOBJPATH}
  ATOM=${ATOM:-$UNIXATOM}
  FSMAN=${FSMAN:-$UNIXFSMAN}
  if [[ $DEBUG -eq 1 ]] ; then
    BINPATH=${BINPATH:-$UNIXDEBUGBINPATH}
  else
    BINPATH=${BINPATH:-$UNIXBINPATH}
  fi
else if [ $SYSTEM = "windows" ] ; then
  echo "Target system is windows"
  CORELIB=${CORELIB:-$WINDOWSCORELIB}
  COREPATH=${COREPATH:=$WINDOWSCOREPATH}
  COREOBJPATH=${COREOBJPATH:-$WINDOWSCOREOBJPATH}
  UTILSPATH=${UTILSPATH:-$WINDOWSUTILSPATH}
  UTILSOBJPATH=${UTILSOBJPATH:-$WINDOWSUTILSOBJPATH}
  ATOM=${ATOM:-$WINDOWSATOM}
  FSMAN=${FSMAN:-$WINDOWSFSMAN}
  if [[ $DEBUG -eq 1 ]] ; then
    BINPATH=${BINPATH:-$WINDOWSDEBUGBINPATH}
  else
    BINPATH=${BINPATH:-$WINDOWSBINPATH}
  fi
else
  echo "ERROR! Wrong target system"
  exit -1
fi
fi

# Codecheck
if [[ $CODECHECK -eq 1 ]] ; then
  echo "Code check is enabled"
  if [ $SYSTEM = "unix" ] ; then 
    CPPLINT=${CPPLINT:-$UNIXCPPLINT}
  fi
  if [ $SYSTEM = "windows" ] ; then
    CPPLINT=${CPPLINT:-$WINDOWSCPPLINT}
  fi
fi

# Check object file extension
if [ $CXX = "g++" ] ; then
  OBJEXT=${OBJEXT:-$GCCOBJEXT}
else
  OBJEXT=${OBJEXT:-$WINOBJEXT}
fi

# Writing Makefile
echo "Writing Makefile..."
echo "# Generated by configure utility"                        > Makefile
# Write codecheck section
if [[ $CODECHECK -eq 1 ]] ; then
  echo "all : cpplint prepare atom fsman"                     >> Makefile
  echo ".PHONY : all"                                         >> Makefile
  echo ".PHONY : cpplint"                                     >> Makefile
  echo "cpplint :"                                            >> Makefile
  echo "	$CPPLINT $CPPLINTFLAGS preproc.h"             >> Makefile
  echo "	$CPPLINT $CPPLINTFLAGS ${COREPATH}error.h"    >> Makefile
  echo "	$CPPLINT $CPPLINTFLAGS ${COREPATH}error.cpp"  >> Makefile
  echo "	$CPPLINT $CPPLINTFLAGS ${COREPATH}gamefs.h"   >> Makefile
  echo "	$CPPLINT $CPPLINTFLAGS ${COREPATH}gamefs.cpp" >> Makefile
  echo "	$CPPLINT $CPPLINTFLAGS ${COREPATH}window.h"   >> Makefile
  echo "	$CPPLINT $CPPLINTFLAGS ${COREPATH}window.cpp" >> Makefile
  echo "	$CPPLINT $CPPLINTFLAGS ${COREPATH}main.cpp"   >> Makefile
  echo "	$CPPLINT $CPPLINTFLAGS ${UTILSPATH}crc32.h"   >> Makefile
  echo "	$CPPLINT $CPPLINTFLAGS ${UTILSPATH}crc32.cpp" >> Makefile
  echo "	$CPPLINT $CPPLINTFLAGS ${UTILSPATH}fsman.cpp" >> Makefile
  
else
  echo "all : prepare atom fsman"                             >> Makefile
  echo ".PHONY : all"                                         >> Makefile
fi
# Write atom section
COREOBJ=${COREOBJ:-${COREOBJPATH}error${OBJEXT} ${COREOBJPATH}gamefs${OBJEXT} ${COREOBJPATH}window${OBJEXT} ${COREOBJPATH}main${OBJEXT}}
echo "atom : $COREOBJ"                                        >> Makefile
echo "	$LINK $CORELIB $COREOBJ -o ${BINPATH}${ATOM}"         >> Makefile
echo "${COREOBJPATH}error${OBJEXT} : ${COREPATH}error.cpp \
${COREPATH}error.h preproc.h"                                 >> Makefile
echo "	$CXX $FLAGS ${COREPATH}error.cpp -o \
${COREOBJPATH}error${OBJEXT}"                                 >> Makefile
echo "${COREOBJPATH}gamefs${OBJEXT} : ${COREPATH}gamefs.cpp \
${COREPATH}gamefs.h preproc.h ${COREPATH}error.h"             >> Makefile
echo "	$CXX $FLAGS ${COREPATH}gamefs.cpp -o \
${COREOBJPATH}gamefs${OBJEXT}"                                >> Makefile
echo "${COREOBJPATH}window${OBJEXT} : ${COREPATH}window.cpp \
${COREPATH}window.h ${COREPATH}error.h"                       >> Makefile
echo "	$CXX $FLAGS ${COREPATH}window.cpp -o \
${COREOBJPATH}window${OBJEXT}"                                >> Makefile
echo "${COREOBJPATH}main${OBJEXT} : ${COREPATH}main.cpp \
preproc.h ${COREPATH}window.h ${COREPATH}error.h"             >> Makefile
echo "	$CXX $FLAGS ${COREPATH}main.cpp -o \
${COREOBJPATH}main${OBJEXT}"                                  >> Makefile

# Write fsman section
FSMANOBJ=${FSMANOBJ:-${UTILSOBJPATH}crc32${OBJEXT} ${UTILSOBJPATH}error${OBJEXT} ${UTILSOBJPATH}gamefs${OBJEXT} ${UTILSOBJPATH}fsman${OBJEXT}}
echo "fsman : $FSMANOBJ"                                      >> Makefile
echo "	$LINK $FSMANOBJ -o ${BINPATH}${FSMAN}"                >> Makefile
echo "${UTILSOBJPATH}crc32${OBJEXT} : ${UTILSPATH}crc32.cpp \
${UTILSPATH}crc32.h"                                          >> Makefile
echo "	$CXX $FLAGS $FSMANFLAGS ${UTILSPATH}crc32.cpp -o \
${UTILSOBJPATH}crc32${OBJEXT}"                                >> Makefile
echo "${UTILSOBJPATH}error${OBJEXT} : ${COREPATH}error.cpp \
${COREPATH}error.h preproc.h"                                 >> Makefile
echo "	$CXX $FLAGS $FSMANFLAGS ${COREPATH}error.cpp -o \
${UTILSOBJPATH}error${OBJEXT}"                                >> Makefile
echo "${UTILSOBJPATH}gamefs${OBJEXT} : ${COREPATH}gamefs.cpp \
${COREPATH}gamefs.h preproc.h ${COREPATH}error.h \
${UTILSPATH}crc32.h"                                          >> Makefile
echo "	$CXX $FLAGS $FSMANFLAGS ${COREPATH}gamefs.cpp -o \
${UTILSOBJPATH}gamefs${OBJEXT}"                               >> Makefile
echo "${UTILSOBJPATH}fsman${OBJEXT} : ${UTILSPATH}fsman.cpp \
preproc.h ${COREPATH}gamefs.h ${COREPATH}error.h"             >> Makefile
echo "	$CXX $FLAGS $FSMANFLAGS ${UTILSPATH}fsman.cpp -o \
${UTILSOBJPATH}fsman${OBJEXT}"                                >> Makefile

# Write prepare section
  echo ".PHONY : prepare"                                     >> Makefile
  echo "prepare :"                                            >> Makefile
if [ $SYSTEM = "unix" ] ; then
  echo "	-mkdir $COREOBJPATH"                          >> Makefile
  echo "	-mkdir $UTILSOBJPATH"                         >> Makefile
  echo "	-mkdir $BINPATH"                              >> Makefile
fi
if [ $SYSTEM = "windows" ] ; then
  echo "	-md $COREOBJPATH"                             >> Makefile
  echo "	-md $UTILSOBJPATH"                            >> Makefile
  echo "	-md $BINPATH"                                 >> Makefile
fi
# Write clean section
echo ".PHONY : clean"                                         >> Makefile
echo "clean :"                                                >> Makefile
echo "	-rm -r $COREOBJPATH"                                  >> Makefile
echo "	-rm -r $UTILSOBJPATH"                                 >> Makefile
echo "	-rm $ATOM"                                            >> Makefile
echo "	-rm $FSMAN"                                           >> Makefile

echo "Done"
echo "Please rum \"make\" to compile atom engine"
exit 0
