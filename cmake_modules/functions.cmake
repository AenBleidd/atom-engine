# Function that will convert string constants in files

function (CreateMessagesFile filename ModuleName VarName)
  string(REGEX REPLACE ".msg" ".h" out ${filename})
  message(STATUS "Create file ${ModuleName}/${out}")
  file(STRINGS ${filename} file_text)
  foreach(line ${file_text})
    if (${line} MATCHES "^<.*>$")
      list(APPEND list_id ${line})
    else ()
      list(APPEND list_text ${line})
    endif (${line} MATCHES "^<.*>$")
  endforeach(line)

  list(LENGTH list_id len_id)
  list(LENGTH list_text len_text)
  if (NOT ${len_id} EQUAL ${len_text})
    message(FATAL_ERROR "Incorrect file")
  endif (NOT ${len_id} EQUAL ${len_text})
# We need two arrays

  SET (f_error:INT 0)
  SET (f_warn:INT 0)
  SET (f_error 0)
  SET (f_warn 0)
  SET (error_pos 0)
  SET (warn_pos 0)
  SET (i:INT 0)
  SET (i 0)

  foreach(line ${list_id})
    string(REGEX REPLACE "[<>]" "" line ${line})
    string(COMPARE EQUAL ${line} "ERROR" result)
    string(COMPARE EQUAL ${line} "WARNING" result2)
    if (${result} EQUAL 1)
      if (${f_error} EQUAL 0)
        math(EXPR error_pos ${i})
        SET (f_error 1)
        if (${f_warn} EQUAL 1)
          SET (f_warn 2)
        endif (${f_warn} EQUAL 1)
      else ()
       message(FATAL_ERROR "Incorrect file")
      endif (${f_error} EQUAL 0)
    elseif (${f_error} EQUAL 1 AND NOT ${result2} EQUAL 1)
      list(APPEND list_error_id ${line})
    endif (${result} EQUAL 1)

    if (${result2} EQUAL 1)
      if (${f_warn} EQUAL 0)
        math(EXPR warn_pos ${i})
        SET (f_warn 1)
        if (${f_error} EQUAL 1)
          SET (f_error 2)
        endif (${f_error} EQUAL 1)
      else ()
       message(FATAL_ERROR "Incorrect file")
      endif (${f_warn} EQUAL 0)
    elseif (${f_warn} EQUAL 1 AND NOT ${result} EQUAL 1)
      list(APPEND list_warn_id ${line})
    endif (${result2} EQUAL 1)
    math(EXPR i ${i}+1)
  endforeach(line) 

# It's impossible...
  if (${error_pos} EQUAL ${warn_pos})
    if (${f_error} GREATER 0 AND ${f_warn} GREATER 0)
      message(FATAL_ERROR "Incorrect file")
    endif (${f_error} GREATER 0 AND ${f_warn} GREATER 0)
  endif (${error_pos} EQUAL ${warn_pos})

# OK, let's parse messages...
  SET(i 0)
  foreach(line ${list_text})
    if (${i} EQUAL ${error_pos})
      SET(error_msg ${line})
    endif (${i} EQUAL ${error_pos})
    if (${i} EQUAL ${warn_pos})
      SET(warn_msg ${line})
    endif (${i} EQUAL ${warn_pos})
    if (${error_pos} LESS ${warn_pos})
# Ok, it's normal
      if (${i} GREATER ${error_pos} AND ${i} LESS ${warn_pos})
        list(APPEND list_error_msg ${line})
      elseif (${i} GREATER ${warn_pos})
        list(APPEND list_warn_msg ${line})
      endif (${i} GREATER ${error_pos} AND ${i} LESS ${warn_pos})
    else ()
# who wrote such file????
      if (${i} GREATER ${warn_pos} AND ${i} LESS ${error_pos})
        list(APPEND list_warn_msg ${line})
      elseif (${i} GREATER ${warn_pos})
        list(APPEND list_error_msg ${line})
      endif (${i} GREATER ${warn_pos} AND ${i} LESS ${error_pos})
    endif (${error_pos} LESS ${warn_pos})
    math(EXPR i ${i}+1)
  endforeach(line)

# Create output file
  file(WRITE ${out} "// This file was automatically created by CMake script\n")
  string(TOUPPER ${ModuleName} ModuleUPName)
  string(TOLOWER ${ModuleName} ModuleDName)
  file(APPEND ${out} "#ifndef _${ModuleUPName}_MESSAGES_H_\n")
  file(APPEND ${out} "#define _${ModuleUPName}_MESSAGES_H_\n")
# write errors
  if (${f_error} GREATER 0)
    file(APPEND ${out} "// Error codes\n")
    file(APPEND ${out} "static int32_t ERROR_${VarName};\n")
    file(APPEND ${out} "static char *${ModuleDName}_error_description = ${error_msg};\n")
    file(APPEND ${out} "/* ${ModuleName} Error Codes */\n")
    file(APPEND ${out} "enum {\n")
    SET(i 0)
    foreach(line ${list_error_id})
      if (${i} EQUAL 0)
        file(APPEND ${out} "  ${line} = 0x00000000")
      else ()
        file(APPEND ${out} ",\n  ${line}")      
      endif (${i} EQUAL 0)    
      math(EXPR i ${i}+1)
    endforeach(line)
    file(APPEND ${out} "\n};\n")
    file(APPEND ${out} "/* ${ModuleName} Error Descriptions */\n")
    file(APPEND ${out} "static char *${ModuleDName}errorcodes[] = {\n")
    SET(i 0)
    foreach(line ${list_error_msg})
      if (${i} EQUAL 0)
        file(APPEND ${out} "  ${line}")
      else ()
        file(APPEND ${out} ",\n  ${line}")
      endif (${i} EQUAL 0)
      math(EXPR i ${i}+1)
    endforeach(line)
    file(APPEND ${out} "\n};\n")
  endif (${f_error} GREATER 0)

# write warnings
  if (${f_warn} GREATER 0)
    file(APPEND ${out} "// Warning codes\n")
    file(APPEND ${out} "static int32_t WARNING_${VarName};\n")
    file(APPEND ${out} "static char *${ModuleDName}_warn_description = ${warn_msg};\n")
    file(APPEND ${out} "/* ${ModuleName} Warning Codes */\n")
    file(APPEND ${out} "enum {\n")
    SET(i 0)
    foreach(line ${list_warn_id})
      if (${i} EQUAL 0)
        file(APPEND ${out} "  ${line} = 0x00000000")
      else ()
        file(APPEND ${out} ",\n  ${line}")      
      endif (${i} EQUAL 0)    
      math(EXPR i ${i}+1)
    endforeach(line)
    file(APPEND ${out} "\n};\n")
    file(APPEND ${out} "/* ${ModuleName} Warning Descriptions */\n")
    file(APPEND ${out} "static char *${ModuleDName}warncodes[] = {\n")
    SET(i 0)
    foreach(line ${list_warn_msg})
      if (${i} EQUAL 0)
        file(APPEND ${out} "  ${line}")
      else ()
        file(APPEND ${out} ",\n  ${line}")
      endif (${i} EQUAL 0)
      math(EXPR i ${i}+1)
    endforeach(line)
    file(APPEND ${out} "\n};\n")
  endif (${f_warn} GREATER 0)

  file(APPEND ${out} "#endif  // _${ModuleUPName}_MESSAGES_H_\n")

endfunction()